{"version":3,"sources":["components/Bar.js","components/Axis.js","components/BarChart.js","App.js","registerServiceWorker.js","index.js"],"names":["Bar","props","x","y","width","height","react_default","a","createElement","className","defaultProps","Axis","axisRef","React","createRef","this","updateAxis","prevProps","scale","JSON","stringify","domain","_this$props","orientation","d3","current","transition","duration","call","concat","_this$props2","xTransform","yTransform","ref","transform","Component","margin","BarChart","state","bars","xScale","yScale","_this$state","map","d","components_Bar","key","components_Axis","nextProps","data","month","rangeRound","padding","rainfall","range","nice","bandwidth","App","precipitation","city","updateCity","e","_this","setState","target","value","_this2","Promise","all","fetch","process","then","responses","resp","json","_ref","_ref2","Object","slicedToArray","van","yel","cal","tor","stj","href","rel","name","onChange","label","option","components_BarChart","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.34e6388c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Bar = (props) => {\n  const {\n    x, y, width, height,\n  } = props;\n  return (\n    <rect\n      x={x}\n      y={y}\n      width={width}\n      height={height}\n      className=\"rect\"\n    />\n  );\n};\n\nexport default Bar;\n\nBar.propTypes = {\n  x: PropTypes.number,\n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n};\n\nBar.defaultProps = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nclass Axis extends Component {\n  static propTypes = {\n    orientation: PropTypes.oneOf(['Top', 'Right', 'Bottom', 'Left']),\n    scale: PropTypes.func,\n    xTransform: PropTypes.number,\n    yTransform: PropTypes.number,\n    className: PropTypes.string,\n  };\n\n  static defaultProps = {\n    orientation: 'Left',\n    xTransform: 0,\n    yTransform: 0,\n    className: null,\n  };\n\n  axisRef = React.createRef();\n\n  componentDidMount() {\n    this.updateAxis();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { scale } = this.props;\n    if (\n      JSON.stringify(prevProps.scale.domain())\n      !== JSON.stringify(scale.domain())\n    ) this.updateAxis();\n  }\n\n  updateAxis() {\n    const { orientation, scale } = this.props;\n\n    d3.select(this.axisRef.current)\n      .transition()\n      .duration(500)\n      .call(d3[`axis${orientation}`](scale));\n  }\n\n  render() {\n    const { xTransform, yTransform, className } = this.props;\n    return (\n      <g\n        ref={this.axisRef}\n        transform={`translate(${xTransform}, ${yTransform})`}\n        className={className}\n      />\n    );\n  }\n}\n\nexport default Axis;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nimport Bar from './Bar';\nimport Axis from './Axis';\n\nconst margin = {\n  top: 20, right: 10, bottom: 30, left: 35,\n};\nconst width = 750 - margin.left - margin.right;\nconst height = 300 - margin.top - margin.bottom;\n\nclass BarChart extends Component {\n  state = {\n    bars: [],\n    xScale: null,\n    yScale: null,\n  };\n\n  static getDerivedStateFromProps(nextProps) {\n    const { data } = nextProps;\n\n    if (!data) return {};\n\n    const xScale = d3\n      .scaleBand()\n      .domain(data.map(d => d.month))\n      .rangeRound([0, width])\n      .padding(0.1);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, d => d.rainfall)])\n      .range([height, 0])\n      .nice();\n\n    const bars = data.map(d => ({\n      x: xScale(d.month),\n      y: yScale(d.rainfall),\n      height: height - yScale(d.rainfall),\n      width: xScale.bandwidth(),\n    }));\n\n    return { xScale, yScale, bars };\n  }\n\n  render() {\n    const { xScale, yScale, bars } = this.state;\n    if (!xScale || !yScale) return null;\n\n    return (\n      <svg\n        width={width + margin.left + margin.right}\n        height={height + margin.top + margin.bottom}\n      >\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          {bars.map(d => (\n            <Bar x={d.x} y={d.y} width={d.width} height={d.height} key={d.x} />\n          ))}\n          <Axis\n            orientation=\"Bottom\"\n            scale={xScale}\n            xTransform={0}\n            yTransform={height}\n            className=\"XAxis\"\n          />\n          <Axis\n            orientation=\"Left\"\n            xTransform={0}\n            yTransform={0}\n            scale={yScale}\n            className={null}\n          />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default BarChart;\n","import React, { Component } from 'react';\nimport './App.css';\nimport BarChart from './components/BarChart';\n\nclass App extends Component {\n  state = {\n    precipitation: {},\n    city: 'van',\n  };\n\n  componentDidMount() {\n    Promise.all([\n      fetch(`${process.env.PUBLIC_URL || ''}/van.json`),\n      fetch(`${process.env.PUBLIC_URL || ''}/yel.json`),\n      fetch(`${process.env.PUBLIC_URL || ''}/cal.json`),\n      fetch(`${process.env.PUBLIC_URL || ''}/tor.json`),\n      fetch(`${process.env.PUBLIC_URL || ''}/stj.json`),\n    ])\n      .then(responses => Promise.all(responses.map(resp => resp.json())))\n      .then(([van, yel, cal, tor, stj]) => {\n        this.setState({\n          precipitation: {\n            van, yel, cal, tor, stj,\n          },\n        });\n      });\n  }\n\n  updateCity = (e) => {\n    this.setState({ city: e.target.value });\n  };\n\n  render() {\n    const data = this.state.precipitation[this.state.city];\n    return (\n      <div className=\"App\">\n        <div className=\"Intro\">\n          <h1> Rainfall in Canada </h1>\n          <p>\n            There are five distinct regions in Canada: the West Coast, the\n            Northern Territories, the Prairie Provinces, Central Canada and\n            the Atlantic Region. The West Coast precipitation is higher in\n            winter than in summer. In the Prairie Provinces and in the Northern\n            Territories spring and summer are wetter than winter. In Central\n            Canada winter and summer precipitation levels are approximately\n            the same. Rainfall is fairly evenly distributed throughout the\n            year in the Atlantic Provinces.\n          </p>\n          <p>\n            Bar charts show monthly rainfall (in mm) in Vancouver (West Coast),\n            Yellowknife (Northern Territories), Calgary (Prairies), Toronto\n            (Central Canada) and St. John&apos;s (Atlantic Region) in 2018.\n            Data provided by\n            {' '}\n            {' '}\n            <a\n              href=\"https://www.canada.ca/en/environment-climate-change.html\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n            Environment and Climate Change Canada\n            </a>\n            {' '}\n            via\n            <a\n              href=\"https://www.weatherstats.ca/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {' '}\n              weatherstats\n            </a>\n.\n          </p>\n        </div>\n        <div className=\"Selector\">\n          <select name=\"city\" onChange={this.updateCity}>\n            {[\n              { label: 'Vancouver', value: 'van' },\n              { label: 'Yellowknife', value: 'yel' },\n              { label: 'Calgary', value: 'cal' },\n              { label: 'Toronto', value: 'tor' },\n              { label: \"St. John's\", value: 'stj' },\n            ].map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"Chart\">\n          <BarChart data={data} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}